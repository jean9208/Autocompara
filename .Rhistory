library(ocR)
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"auto_captcha_nocolor.tif",
"cap.txt")
cap <- readPNG("Autocompara//auto_captcha_crop.png")
library(png)
cap <- readPNG("Autocompara//auto_captcha_crop.png")
grid.raster(cap[,,3])
library(grid)
grid.raster(cap[,,3])
grid.raster(cap[,,4])
grid.raster(cap[,1,3])
grid.raster(cap[,,1:3])
grid.raster(cap[,,1:2])
grid.raster(cap[,,3])
?grid.raster
grid.raster(cap[0,1:3/4,.1])
grid.raster(cap[0,1:3/4,.1], interpolate =  F)
grid.raster(cap[0,1:3/4,.1], interpolate =  T)
grid.raster(cap[0,1:3/4,])
grid.raster(cap[0,,])
grid.raster(cap[,,])
grid.raster(cap[1,,])
grid.raster(cap[2,,])
grid.raster(cap[3,,])
cap
grid.raster(cap[,1,])
grid.raster(cap[,2,])
grid.raster(cap[,3,])
grid.raster(cap[1,3,])
grid.raster(cap[,,1])
grid.raster(cap[,,2])
grid.raster(cap[,,3])
grid.raster(cap[,1,3])
grid.raster(cap[1,,3])
grid.raster(cap[,,1])
grid.raster(cap[,,3])
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"auto_captcha_nocolor.tif",
"cap.txt")
?ocrTesseract
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"auto_captcha_nocolor.tif",
"cap.txt", lang =  "eng")
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"auto_captcha_nocolor.tif",
"cap.txt", lang =  "eng", psm = 10)
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"auto_captcha_nocolor.tif",
"cap.txt", lang =  "eng", psm = 9)
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"auto_captcha_nocolor.tif",
"cap.txt", lang =  "eng", psm = 8)
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"auto_captcha_nocolor.tif",
"cap.txt", lang =  "eng", psm = 7)
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"auto_captcha_nocolor.tif",
"cap.txt", lang =  "eng", psm = 6)
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"auto_captcha_nocolor.tif",
"cap.txt", lang =  "eng", psm = 5)
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"auto_captcha_nocolor.tif",
"cap.txt", lang =  "eng", psm = 4)
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"auto_captcha_nocolor.tif",
"cap.txt", lang =  "eng", psm = 4)
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"auto_captcha_nocolor.tif",
"cap.txt", lang =  "eng", psm = 3)
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"auto_captcha_nocolor.tif",
"cap.txt", lang =  "eng", psm = 2)
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"auto_captcha_nocolor.tif",
"cap.txt", lang =  "eng", psm = 1)
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"auto_captcha_nocolor.tif",
"cap.txt", lang =  "eng", psm = 0)
cap <- readPNG("Autocompara//auto_captcha_crop.png")
png("Autocompara//auto_captcha_nocolor.png")
grid.raster(cap[,,3])
dev.off()
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"auto_captcha_nocolor.png",
"cap.txt")
dim(cap)
grid.raster(cap[,,1:2])
rasterGrob(grid.raster(cap[,,1:2]))
rasterGrob(grid.raster(cap[,,0:1]))
grid.raster(cap[,,0:1])
grid.raster(cap[,,1:2])
grid.raster(cap[,,2:3])
dim(cap)
grid.raster(cap[,,1])
grid.raster(cap[,,2])
grid.raster(cap[,,3])
cap.R <- cap
cap.G <- cap
cap.B <- cap
cap.R[,,2:3] <- 0
cap.G[,,1]   <- 0
cap.G[,,3]   <- 0
cap.B[,,1:2] <- 0
img1 <- rasterGrob(cap.R)
img2 <- rasterGrob(cap.G)
img3 <- rasterGrob(cap.B)
grid.arrange(img1, img2, img3, nrow=1)
library("gridExtra")
install.packages("gridExtra")
library("gridExtra")
grid.arrange(img1, img2, img3, nrow=1)
df <- data.frame(
red = matrix(mandrill[,,1], ncol=1),
green = matrix(mandrill[,,2], ncol=1),
blue = matrix(mandrill[,,3], ncol=1)
)
df <- data.frame(
red = matrix(cap[,,1], ncol=1),
green = matrix(cap[,,2], ncol=1),
blue = matrix(cap[,,3], ncol=1)
)
### compute the k-means clustering
K <- kmeans(df,4)
df$label <- K$cluster
colors <- data.frame(
label = 1:nrow(K$centers),
R = K$centers[,"red"],
G = K$centers[,"green"],
B = K$centers[,"blue"]
)
# IMPORTANT: we must maintain the original order of the df after the merge!
df$order <- 1:nrow(df)
df <- merge(df, colors)
df <- df[order(df$order),]
df$order <- NULL
# reconstitute the segmented image in the same shape as the input image
cap.segmented <- array(dim=dim(mandrill))
cap.segmented[,,1] <- R
cap.segmented[,,2] <- G
cap.segmented[,,3] <- B
R = matrix(df$R, nrow=dim(mandrill)[1])
G = matrix(df$G, nrow=dim(mandrill)[1])
B = matrix(df$B, nrow=dim(mandrill)[1])
# reconstitute the segmented image in the same shape as the input image
cap.segmented <- array(dim=dim(mandrill))
cap.segmented[,,1] <- R
cap.segmented[,,2] <- G
cap.segmented[,,3] <- B
R = matrix(df$R, nrow=dim(cap)[1])
G = matrix(df$G, nrow=dim(cap)[1])
B = matrix(df$B, nrow=dim(cap)[1])
# reconstitute the segmented image in the same shape as the input image
cap.segmented <- array(dim=dim(mandrill))
cap.segmented[,,1] <- R
cap.segmented[,,2] <- G
cap.segmented[,,3] <- B
cap.segmented <- array(dim=dim(cap))
cap.segmented[,,1] <- R
cap.segmented[,,2] <- G
cap.segmented[,,3] <- B
grid.raster(cap.segmented)
png("Autocompara//auto_captcha_proc.png")
grid.raster(cap.segmented)
dev.off()
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"auto_captcha_proc.png",
"cap.txt")
### compute the k-means clustering
K <- kmeans(df,2)
df$label <- K$cluster
### Replace the color of each pixel in the image with the mean
### R,G, and B values of the cluster in which the pixel resides:
# get the coloring
colors <- data.frame(
label = 1:nrow(K$centers),
R = K$centers[,"red"],
G = K$centers[,"green"],
B = K$centers[,"blue"]
)
# merge color codes on to df
# IMPORTANT: we must maintain the original order of the df after the merge!
df$order <- 1:nrow(df)
df <- merge(df, colors)
df <- df[order(df$order),]
df$order <- NULL
# get mean color channel values for each row of the df.
R = matrix(df$R, nrow=dim(cap)[1])
G = matrix(df$G, nrow=dim(cap)[1])
B = matrix(df$B, nrow=dim(cap)[1])
# reconstitute the segmented image in the same shape as the input image
cap.segmented <- array(dim=dim(cap))
cap.segmented[,,1] <- R
cap.segmented[,,2] <- G
cap.segmented[,,3] <- B
png("Autocompara//auto_captcha_proc.png")
grid.raster(cap.segmented)
dev.off()
K
K <- kmeans(df,2)
df$label <- K$cluster
K <- kmeans(df,2)
df <- data.frame(
red = matrix(cap[,,1], ncol=1),
green = matrix(cap[,,2], ncol=1),
blue = matrix(cap[,,3], ncol=1)
)
K <- kmeans(df,2)
df$label <- K$cluster
colors <- data.frame(
label = 1:nrow(K$centers),
R = K$centers[,"red"],
G = K$centers[,"green"],
B = K$centers[,"blue"]
)
df$order <- 1:nrow(df)
df <- merge(df, colors)
df <- df[order(df$order),]
df$order <- NULL
R = matrix(df$R, nrow=dim(cap)[1])
G = matrix(df$G, nrow=dim(cap)[1])
B = matrix(df$B, nrow=dim(cap)[1])
cap.segmented <- array(dim=dim(cap))
cap.segmented[,,1] <- R
cap.segmented[,,2] <- G
cap.segmented[,,3] <- B
png("Autocompara//auto_captcha_proc.png")
grid.raster(cap.segmented)
dev.off()
grid.raster(cap.segmented)
# reshape image into a data frame
df <- data.frame(
red = matrix(cap[,,1], ncol=1),
green = matrix(cap[,,2], ncol=1),
blue = matrix(cap[,,3], ncol=1)
)
### compute the k-means clustering
K <- kmeans(df,3)
df$label <- K$cluster
### Replace the color of each pixel in the image with the mean
### R,G, and B values of the cluster in which the pixel resides:
# get the coloring
colors <- data.frame(
label = 1:nrow(K$centers),
R = K$centers[,"red"],
G = K$centers[,"green"],
B = K$centers[,"blue"]
)
# merge color codes on to df
# IMPORTANT: we must maintain the original order of the df after the merge!
df$order <- 1:nrow(df)
df <- merge(df, colors)
df <- df[order(df$order),]
df$order <- NULL
# get mean color channel values for each row of the df.
R = matrix(df$R, nrow=dim(cap)[1])
G = matrix(df$G, nrow=dim(cap)[1])
B = matrix(df$B, nrow=dim(cap)[1])
# reconstitute the segmented image in the same shape as the input image
cap.segmented <- array(dim=dim(cap))
cap.segmented[,,1] <- R
cap.segmented[,,2] <- G
cap.segmented[,,3] <- B
png("Autocompara//auto_captcha_proc.png")
grid.raster(cap.segmented)
dev.off()
grid.raster(cap.segmented)
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"auto_captcha_proc.png",
"cap.txt")
grid.raster(cap.segmented[,,3])
png("Autocompara//auto_captcha_nocolor2.png")
grid.raster(cap.segmented[,,3])
dev.off()
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"auto_captcha_nocolor2.png",
"cap.txt")
grid.raster(cap.segmented[,,2])
grid.raster(cap.segmented[,,1])
image(cap)
image(as.matrix(cap))
library(imager)
install.packages("imager")
library(imager)
captcha <- load.image("Autocompara//auto_captcha_crop.png")
plot(captcha)
?load.image
plot(captcha)
plot(captcha, frame = 1)
captcha
display(captcha)
captcha.x <- captcha
B(capthca.x) <- 0
B(captcha.x) <- 0
plot(captcha.x)
display(captcha.x)
?pad
pad(captcha, axes = "y", 140)
pad(captcha, axes = "y", 140) %>% display()
pad(captcha, axes = "y", 140, pos = -1) %>% display()
pad(captcha, axes = "y", 180, pos = -1) %>% display()
pad(captcha, axes = "y", 200, pos = -1) %>% display()
captcha %>% autocrop(c(250,250,250)) %>%display()
captcha %>% dispÃ±lay()
captcha %>% display()
captcha.x %>% autocrop(c(250,250,250)) %>%display()
captcha.x %>% autocrop(c(250,250,0)) %>%display()
grayscale(captcha) %>% display()
?imager::threshold()
?imager::threshold
threshold(captcha,".1") %>% display()
threshold(captcha,".2") %>% display()
threshold(captcha,".3") %>% display()
threshold(captcha,".7") %>% display()
threshold(captcha,".9") %>% display()
threshold(captcha,".9.5") %>% display()
threshold(captcha,"1") %>% display()
threshold(captcha,"auto") %>% display()
class(captcha)
threshold(captcha,"auto") %>% display() %>% imager::save.image("Autocompara\\prueba.png")
threshold(captcha,"auto") %>% imager::save.image("Autocompara\\prueba.png")
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"prueba.png",
"cap.txt")
threshold(captcha,"1") %>% imager::save.image("Autocompara\\prueba.png")
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"prueba.png",
"cap.txt")
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"cap_proc_9.png",
"cap.txt")
ocrTesseract("C:\\Users\\Jean\\Documents\\Autocompara",
"cap_proc_9.gif",
"cap.txt")
getwd()
system("python Autocompara\solve_captcha.py")
system("python Autocompara//solve_captcha.py")
response <- system("python Autocompara//solve_captcha.py")
response
system("python Autocompara//solve_captcha.py")
readLines("solved.txt")
solved <- readLines("solved.txt")[1]
solved
setwd("Autocompara")
system("python Autocompara//solve_captcha.py")
system("python solve_captcha.py")
solved <- readLines("solved.txt")[1]
solved
